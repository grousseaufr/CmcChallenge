{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\grego\\\\source\\\\repos\\\\CmcChallenge\\\\CmcChallenge\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ProductItemComponent } from './product-item.component';\nimport { By } from '@angular/platform-browser';\nimport { CountryService } from 'src/app/services/country.service';\nimport { ReplaySubject } from 'rxjs';\nimport { CartService } from 'src/app/services/cart.service';\ndescribe('ProductItemComponent', () => {\n  let component;\n  let fixture;\n  const $currentCountry = new ReplaySubject();\n  let cartServiceSpy;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [ProductItemComponent],\n      providers: [{\n        provide: 'BASE_URL',\n        useValue: 'http://localhost'\n      }, {\n        provide: CountryService,\n        useValue: {\n          $currentCountry\n        }\n      }, {\n        provide: CartService,\n        useValue: cartServiceSpy\n      }]\n    }).compileComponents();\n  }));\n  const mockProduct = {\n    productId: 1,\n    description: 'test description',\n    name: 'test name',\n    price: 10\n  };\n  const mockCountryAus = {\n    countryId: 1,\n    conversionRateFromAud: 1,\n    currencyCode: 'AUD',\n    name: 'Australia'\n  };\n  const mockCountryFr = {\n    countryId: 2,\n    conversionRateFromAud: 0.67,\n    currencyCode: 'EUR',\n    name: 'France'\n  };\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ProductItemComponent);\n    component = fixture.componentInstance;\n    component.product = mockProduct;\n    const spy = jasmine.createSpyObj('CartService', ['addProduct']);\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should display product information', () => {\n    $currentCountry.next(mockCountryAus);\n    fixture.detectChanges();\n    const h3 = fixture.debugElement.query(By.css('h3')).nativeElement;\n    expect(h3.textContent).toEqual(component.product.name);\n    const p_description = fixture.nativeElement.querySelector('p.description');\n    expect(p_description.textContent).toEqual(component.product.description);\n    const p_price = fixture.nativeElement.querySelector('p.price');\n    expect(p_price.textContent.trim()).toEqual('Price : A$' + component.product.price.toFixed(2));\n  });\n  it('should call cartService.AddProduct when click on Add To Cart', () => {\n    cartServiceSpy = TestBed.inject(CartService);\n    const button = fixture.debugElement.query(By.css('button')).nativeElement;\n    button.click();\n    expect(cartServiceSpy.addProduct.calls.count()).withContext('spy method was called once').toBe(1);\n  });\n  describe('When changing country', () => {\n    beforeEach(() => {\n      $currentCountry.next(mockCountryFr);\n      fixture.detectChanges();\n    });\n    it('should display price according to country', () => {\n      const priceEur = mockProduct.price * mockCountryFr.conversionRateFromAud;\n      const p_price = fixture.debugElement.query(By.css('p.price'));\n      expect(p_price.nativeElement.textContent.trim()).toEqual('Price : â‚¬' + priceEur.toFixed(2));\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/grego/source/repos/CmcChallenge/CmcChallenge/ClientApp/src/app/views/product-list/product-item/product-item.component.spec.ts"],"names":["TestBed","HttpClientTestingModule","ProductItemComponent","By","CountryService","ReplaySubject","CartService","describe","component","fixture","$currentCountry","cartServiceSpy","beforeEach","configureTestingModule","imports","declarations","providers","provide","useValue","compileComponents","mockProduct","productId","description","name","price","mockCountryAus","countryId","conversionRateFromAud","currencyCode","mockCountryFr","createComponent","componentInstance","product","spy","jasmine","createSpyObj","detectChanges","it","expect","toBeTruthy","next","h3","debugElement","query","css","nativeElement","textContent","toEqual","p_description","querySelector","p_price","trim","toFixed","inject","button","click","addProduct","calls","count","withContext","toBe","priceEur"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { ProductItemComponent } from './product-item.component';\r\nimport { By } from '@angular/platform-browser';\r\nimport { CountryService } from 'src/app/services/country.service';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { CartService } from 'src/app/services/cart.service';\r\ndescribe('ProductItemComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    const $currentCountry = new ReplaySubject();\r\n    let cartServiceSpy;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            imports: [HttpClientTestingModule],\r\n            declarations: [ProductItemComponent],\r\n            providers: [\r\n                { provide: 'BASE_URL', useValue: 'http://localhost' },\r\n                { provide: CountryService, useValue: { $currentCountry } },\r\n                { provide: CartService, useValue: cartServiceSpy },\r\n            ],\r\n        }).compileComponents();\r\n    });\r\n    const mockProduct = {\r\n        productId: 1,\r\n        description: 'test description',\r\n        name: 'test name',\r\n        price: 10,\r\n    };\r\n    const mockCountryAus = {\r\n        countryId: 1,\r\n        conversionRateFromAud: 1,\r\n        currencyCode: 'AUD',\r\n        name: 'Australia',\r\n    };\r\n    const mockCountryFr = {\r\n        countryId: 2,\r\n        conversionRateFromAud: 0.67,\r\n        currencyCode: 'EUR',\r\n        name: 'France',\r\n    };\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(ProductItemComponent);\r\n        component = fixture.componentInstance;\r\n        component.product = mockProduct;\r\n        const spy = jasmine.createSpyObj('CartService', ['addProduct']);\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('should display product information', () => {\r\n        $currentCountry.next(mockCountryAus);\r\n        fixture.detectChanges();\r\n        const h3 = fixture.debugElement.query(By.css('h3')).nativeElement;\r\n        expect(h3.textContent).toEqual(component.product.name);\r\n        const p_description = fixture.nativeElement.querySelector('p.description');\r\n        expect(p_description.textContent).toEqual(component.product.description);\r\n        const p_price = fixture.nativeElement.querySelector('p.price');\r\n        expect(p_price.textContent.trim()).toEqual('Price : A$' + component.product.price.toFixed(2));\r\n    });\r\n    it('should call cartService.AddProduct when click on Add To Cart', () => {\r\n        cartServiceSpy = TestBed.inject(CartService);\r\n        const button = fixture.debugElement.query(By.css('button')).nativeElement;\r\n        button.click();\r\n        expect(cartServiceSpy.addProduct.calls.count())\r\n            .withContext('spy method was called once')\r\n            .toBe(1);\r\n    });\r\n    describe('When changing country', () => {\r\n        beforeEach(() => {\r\n            $currentCountry.next(mockCountryFr);\r\n            fixture.detectChanges();\r\n        });\r\n        it('should display price according to country', () => {\r\n            const priceEur = mockProduct.price * mockCountryFr.conversionRateFromAud;\r\n            const p_price = fixture.debugElement.query(By.css('p.price'));\r\n            expect(p_price.nativeElement.textContent.trim()).toEqual('Price : â‚¬' + priceEur.toFixed(2));\r\n        });\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}