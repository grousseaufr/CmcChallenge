{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\grego\\\\source\\\\repos\\\\CmcChallenge\\\\CmcChallenge\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReplaySubject } from 'rxjs';\nimport { CountryService } from 'src/app/services/country.service';\nimport { OrderConfirmComponent } from '../order-confirm/order-confirm.component';\nimport { NavMenuComponent } from './nav-menu.component';\ndescribe('OrderConfirmComponent', () => {\n  let component;\n  let fixture;\n  let $countryMock = new ReplaySubject();\n  const spyObj = Object.assign(Object.assign({}, jasmine.createSpyObj('CountryService', ['getAll'])), {\n    $country: $countryMock\n  });\n  const mockCountries = [{\n    countryId: 1,\n    conversionRateFromAud: 1,\n    currencyCode: 'AUD',\n    name: 'Australia'\n  }, {\n    countryId: 2,\n    conversionRateFromAud: 0.67,\n    currencyCode: 'EUR',\n    name: 'France'\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    let mockCountryService = {\n      $country: $countryMock,\n      getAll: () => jasmine.createSpyObj('CountryService', ['getAll'])\n    };\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [NavMenuComponent, OrderConfirmComponent],\n      providers: [{\n        provide: 'BASE_URL',\n        useValue: 'http://localhost'\n      }, {\n        provide: CountryService,\n        useValue: mockCountryService\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(NavMenuComponent);\n    component = fixture.componentInstance;\n    let countryService = TestBed.inject(CountryService);\n    let valueServiceSpy = TestBed.inject(CountryService);\n    valueServiceSpy.getAll.and.returnValue(mockCountries); //countryService.getAll..returnValue(of(mockCountries));\n\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    $countryMock.next(mockCountries[0]);\n    expect(component).toBeTruthy();\n  });\n});","map":{"version":3,"sources":["C:/Users/grego/source/repos/CmcChallenge/CmcChallenge/ClientApp/src/app/views/nav-menu/nav-menu.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","ReplaySubject","CountryService","OrderConfirmComponent","NavMenuComponent","describe","component","fixture","$countryMock","spyObj","Object","assign","jasmine","createSpyObj","$country","mockCountries","countryId","conversionRateFromAud","currencyCode","name","beforeEach","mockCountryService","getAll","configureTestingModule","imports","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","countryService","inject","valueServiceSpy","and","returnValue","detectChanges","it","next","expect","toBeTruthy"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,qBAAT,QAAsC,0CAAtC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACAC,QAAQ,CAAC,uBAAD,EAA0B,MAAM;AACpC,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,YAAY,GAAG,IAAIP,aAAJ,EAAnB;AACA,QAAMQ,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,OAAO,CAACC,YAAR,CAAqB,gBAArB,EAAuC,CAAC,QAAD,CAAvC,CAAlB,CAAd,EAAqF;AAAEC,IAAAA,QAAQ,EAAEN;AAAZ,GAArF,CAAf;AACA,QAAMO,aAAa,GAAG,CAClB;AACIC,IAAAA,SAAS,EAAE,CADf;AAEIC,IAAAA,qBAAqB,EAAE,CAF3B;AAGIC,IAAAA,YAAY,EAAE,KAHlB;AAIIC,IAAAA,IAAI,EAAE;AAJV,GADkB,EAOlB;AACIH,IAAAA,SAAS,EAAE,CADf;AAEIC,IAAAA,qBAAqB,EAAE,IAF3B;AAGIC,IAAAA,YAAY,EAAE,KAHlB;AAIIC,IAAAA,IAAI,EAAE;AAJV,GAPkB,CAAtB;AAcAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,QAAIC,kBAAkB,GAAG;AACrBP,MAAAA,QAAQ,EAAEN,YADW;AAErBc,MAAAA,MAAM,EAAE,MAAMV,OAAO,CAACC,YAAR,CAAqB,gBAArB,EAAuC,CAAC,QAAD,CAAvC;AAFO,KAAzB;AAIA,UAAMb,OAAO,CAACuB,sBAAR,CAA+B;AACjCC,MAAAA,OAAO,EAAE,CAACzB,uBAAD,CADwB;AAEjC0B,MAAAA,YAAY,EAAE,CAACrB,gBAAD,EAAmBD,qBAAnB,CAFmB;AAGjCuB,MAAAA,SAAS,EAAE,CACP;AAAEC,QAAAA,OAAO,EAAE,UAAX;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OADO,EAEP;AACID,QAAAA,OAAO,EAAEzB,cADb;AAEI0B,QAAAA,QAAQ,EAAEP;AAFd,OAFO;AAHsB,KAA/B,EAUHQ,iBAVG,EAAN;AAWH,GAhBS,EAAV;AAiBAT,EAAAA,UAAU,CAAC,MAAM;AACbb,IAAAA,OAAO,GAAGP,OAAO,CAAC8B,eAAR,CAAwB1B,gBAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACwB,iBAApB;AACA,QAAIC,cAAc,GAAGhC,OAAO,CAACiC,MAAR,CAAe/B,cAAf,CAArB;AACA,QAAIgC,eAAe,GAAGlC,OAAO,CAACiC,MAAR,CAAe/B,cAAf,CAAtB;AACAgC,IAAAA,eAAe,CAACZ,MAAhB,CAAuBa,GAAvB,CAA2BC,WAA3B,CAAuCrB,aAAvC,EALa,CAMb;;AACAR,IAAAA,OAAO,CAAC8B,aAAR;AACH,GARS,CAAV;AASAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtB9B,IAAAA,YAAY,CAAC+B,IAAb,CAAkBxB,aAAa,CAAC,CAAD,CAA/B;AACAyB,IAAAA,MAAM,CAAClC,SAAD,CAAN,CAAkBmC,UAAlB;AACH,GAHC,CAAF;AAIH,CAjDO,CAAR","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { CountryService } from 'src/app/services/country.service';\r\nimport { OrderConfirmComponent } from '../order-confirm/order-confirm.component';\r\nimport { NavMenuComponent } from './nav-menu.component';\r\ndescribe('OrderConfirmComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let $countryMock = new ReplaySubject();\r\n    const spyObj = Object.assign(Object.assign({}, jasmine.createSpyObj('CountryService', ['getAll'])), { $country: $countryMock });\r\n    const mockCountries = [\r\n        {\r\n            countryId: 1,\r\n            conversionRateFromAud: 1,\r\n            currencyCode: 'AUD',\r\n            name: 'Australia',\r\n        },\r\n        {\r\n            countryId: 2,\r\n            conversionRateFromAud: 0.67,\r\n            currencyCode: 'EUR',\r\n            name: 'France',\r\n        },\r\n    ];\r\n    beforeEach(async () => {\r\n        let mockCountryService = {\r\n            $country: $countryMock,\r\n            getAll: () => jasmine.createSpyObj('CountryService', ['getAll']),\r\n        };\r\n        await TestBed.configureTestingModule({\r\n            imports: [HttpClientTestingModule],\r\n            declarations: [NavMenuComponent, OrderConfirmComponent],\r\n            providers: [\r\n                { provide: 'BASE_URL', useValue: 'http://localhost' },\r\n                {\r\n                    provide: CountryService,\r\n                    useValue: mockCountryService,\r\n                },\r\n            ],\r\n        }).compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(NavMenuComponent);\r\n        component = fixture.componentInstance;\r\n        let countryService = TestBed.inject(CountryService);\r\n        let valueServiceSpy = TestBed.inject(CountryService);\r\n        valueServiceSpy.getAll.and.returnValue(mockCountries);\r\n        //countryService.getAll..returnValue(of(mockCountries));\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        $countryMock.next(mockCountries[0]);\r\n        expect(component).toBeTruthy();\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}