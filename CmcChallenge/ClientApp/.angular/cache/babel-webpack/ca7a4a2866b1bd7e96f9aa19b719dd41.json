{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\grego\\\\source\\\\repos\\\\CmcChallenge\\\\CmcChallenge\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { of } from 'rxjs';\nimport { ProductService } from 'src/app/services/product.service';\nimport { ProductListComponent } from './product-list.component';\ndescribe('ProductListComponent', () => {\n  let component;\n  let fixture;\n  let mockProductService;\n  const mockProducts = [{\n    productId: 1,\n    description: 'test description',\n    name: 'test name',\n    price: 10\n  }, {\n    productId: 2,\n    description: 'test description 2',\n    name: 'test name 2',\n    price: 20\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [ProductListComponent],\n      providers: [{\n        provide: 'BASE_URL',\n        useValue: 'http://localhost'\n      }, {\n        provide: ProductService,\n        useValue: jasmine.createSpyObj('ProductService', ['getAll'])\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ProductListComponent);\n    component = fixture.componentInstance;\n    mockProductService = TestBed.get(ProductService);\n    mockProductService.getAll.and.returnValue(of(mockProducts));\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should display the list of products', () => {\n    const products = fixture.debugElement.query(By.css('product-card')).nativeElement;\n    console.log(products);\n  });\n});","map":{"version":3,"sources":["C:/Users/grego/source/repos/CmcChallenge/CmcChallenge/ClientApp/src/app/views/product-list/product-list.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","By","of","ProductService","ProductListComponent","describe","component","fixture","mockProductService","mockProducts","productId","description","name","price","beforeEach","configureTestingModule","imports","declarations","providers","provide","useValue","jasmine","createSpyObj","compileComponents","createComponent","componentInstance","get","getAll","and","returnValue","detectChanges","it","expect","toBeTruthy","products","debugElement","query","css","nativeElement","console","log"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,EAAT,QAAmB,2BAAnB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACAC,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACnC,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,kBAAJ;AACA,QAAMC,YAAY,GAAG,CACjB;AACIC,IAAAA,SAAS,EAAE,CADf;AAEIC,IAAAA,WAAW,EAAE,kBAFjB;AAGIC,IAAAA,IAAI,EAAE,WAHV;AAIIC,IAAAA,KAAK,EAAE;AAJX,GADiB,EAOjB;AACIH,IAAAA,SAAS,EAAE,CADf;AAEIC,IAAAA,WAAW,EAAE,oBAFjB;AAGIC,IAAAA,IAAI,EAAE,aAHV;AAIIC,IAAAA,KAAK,EAAE;AAJX,GAPiB,CAArB;AAcAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMd,OAAO,CAACe,sBAAR,CAA+B;AACjCC,MAAAA,OAAO,EAAE,CAACjB,uBAAD,CADwB;AAEjCkB,MAAAA,YAAY,EAAE,CAACb,oBAAD,CAFmB;AAGjCc,MAAAA,SAAS,EAAE,CACP;AAAEC,QAAAA,OAAO,EAAE,UAAX;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OADO,EAEP;AACID,QAAAA,OAAO,EAAEhB,cADb;AAEIiB,QAAAA,QAAQ,EAAEC,OAAO,CAACC,YAAR,CAAqB,gBAArB,EAAuC,CAAC,QAAD,CAAvC;AAFd,OAFO;AAHsB,KAA/B,EAUHC,iBAVG,EAAN;AAWH,GAZS,EAAV;AAaAT,EAAAA,UAAU,CAAC,MAAM;AACbP,IAAAA,OAAO,GAAGP,OAAO,CAACwB,eAAR,CAAwBpB,oBAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACkB,iBAApB;AACAjB,IAAAA,kBAAkB,GAAGR,OAAO,CAAC0B,GAAR,CAAYvB,cAAZ,CAArB;AACAK,IAAAA,kBAAkB,CAACmB,MAAnB,CAA0BC,GAA1B,CAA8BC,WAA9B,CAA0C3B,EAAE,CAACO,YAAD,CAA5C;AACAF,IAAAA,OAAO,CAACuB,aAAR;AACH,GANS,CAAV;AAOAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAAC1B,SAAD,CAAN,CAAkB2B,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC5C,UAAMG,QAAQ,GAAG3B,OAAO,CAAC4B,YAAR,CAAqBC,KAArB,CAA2BnC,EAAE,CAACoC,GAAH,CAAO,cAAP,CAA3B,EAAmDC,aAApE;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACH,GAHC,CAAF;AAIH,CA7CO,CAAR","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { By } from '@angular/platform-browser';\r\nimport { of } from 'rxjs';\r\nimport { ProductService } from 'src/app/services/product.service';\r\nimport { ProductListComponent } from './product-list.component';\r\ndescribe('ProductListComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let mockProductService;\r\n    const mockProducts = [\r\n        {\r\n            productId: 1,\r\n            description: 'test description',\r\n            name: 'test name',\r\n            price: 10,\r\n        },\r\n        {\r\n            productId: 2,\r\n            description: 'test description 2',\r\n            name: 'test name 2',\r\n            price: 20,\r\n        },\r\n    ];\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            imports: [HttpClientTestingModule],\r\n            declarations: [ProductListComponent],\r\n            providers: [\r\n                { provide: 'BASE_URL', useValue: 'http://localhost' },\r\n                {\r\n                    provide: ProductService,\r\n                    useValue: jasmine.createSpyObj('ProductService', ['getAll']),\r\n                },\r\n            ],\r\n        }).compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(ProductListComponent);\r\n        component = fixture.componentInstance;\r\n        mockProductService = TestBed.get(ProductService);\r\n        mockProductService.getAll.and.returnValue(of(mockProducts));\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('should display the list of products', () => {\r\n        const products = fixture.debugElement.query(By.css('product-card')).nativeElement;\r\n        console.log(products);\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}